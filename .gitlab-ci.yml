# ставим глобальную переменную image
variables:
  IMAGE: registry.gitlab.com/yourbandy-group/backend/pystval:latest

# ступени работы
stages:
  - build
  - linter

# базовая сборка
Build `Image` (dependencies):
  stage: build
  image: docker:stable
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - docker pull $IMAGE || true
    - docker build --cache-from $IMAGE --build-arg BUILDKIT_INLINE_CACHE=1 -t $IMAGE .
    - docker push $IMAGE

# проверяем сематнику & правописание
Linter check (clippy):
  stage: linter
  image: docker:stable
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - docker pull $IMAGE || true
    - docker run -v $CI_PROJECT_DIR:/app $IMAGE cargo clippy -- -D warnings
#==========================================================================================
# build image:
#   stage: build
#   image: docker:stable
#   services:
#     - docker:dind
#   script:
#     - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
#     - docker pull $IMAGE
#     - docker build --cache-from $IMAGE -t $IMAGE .
#     - docker push $IMAGE
#   cache:
#     key: cargo-dependencies
#     paths:
#       - $CACHE_PATH

# check:
#   stage: test
#   image: docker:stable
#   services:
#     - docker:dind
#   script:
#     - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
#     - docker pull $IMAGE
#     - docker build --cache-from $IMAGE -t $IMAGE .
#     - docker run --security-opt seccomp=unconfined -v $CI_PROJECT_DIR:/app $IMAGE cargo tarpaulin --engine llvm --out xml --output-dir ./coverage/
