// –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ MethodName_StateUnderTest_ExpectedBehavior,
// –ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∏—Ö —Ç–µ—Å—Ç–æ–≤ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º–∏, –ø–æ—ç—Ç–æ–º—É —è —Ä–µ—à–∏–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç. (–ù–µ —Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ —á—Ç–æ –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –∏ –ø—Ä–∏ –∫–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö –∏–¥–µ—Ç —Ç–µ—Å—Ç
// –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º—ã —Å–≤–µ—Ä—è–µ–º `assert`, –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ—ç—Ç–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –Ω–µ –¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∫–∞—Ä—Ç–∏–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏, –∫–∞–∫ –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.)

// –ü—Ä–∏–º–µ—Ä :
//================(–°–∏–Ω—Ç–∞–∫—Å–∏—Å)================
// - fn_<–∏–º—è_—Ñ—É–Ω–∫—Ü–∏–∏>_<t|e>_<–Ω–æ–º–µ—Ä_—Ç–µ—Å—Ç–∞>
//===========================================

// 1) —É–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º–æ –∏–º—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –Ω–∞—á–∞–ª–µ –∏–º–µ–Ω–∏, –¥–∞–ª—å—à–µ –≤—ã–±–∏—Ä–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
// 2) t_x, –≥–¥–µ `t` - —ç—Ç–æ —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –ü–†–ò –°–†–ê–í–ù–ï–ù–ò–ô, –∞ `x` - –Ω–æ–º–µ—Ä —Ç–µ—Å—Ç–∞

// 2.1 ) –ü—Ä–∏–º–µ—Ä :
//===========================
// t_x - TRUE (match)
// e_x - Err() / (SHOULD_PANIC)
//===========================

// 2.2)`t` : –∫ –ø—Ä–∏–º–µ—Ä—É –Ω–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑—Ä–∞—â–∞–µ—Ç `true` –∏ –º—ã –∂–¥–µ–º `true`.
// —Ç–æ–∂–µ —Å–∞–º–æ–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∏ –¥–ª—è `false` –∏ `false`, –∏ –¥–∞–∂–µ –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ `false` –Ω–µ `true`.
// –í—Å–µ —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤–æ–∑—Ä–∞—â–∞—é—Ç `true` –ø–æ—Ç–æ–º—É —á—Ç–æ
// –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –°–†–ê–í–ù–ï–ù–ò–ï, –µ—Å–ª–∏ –≤–∞—à–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —É–¥–∞—á–Ω–æ, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ `t`
// 2.3) `x` : —ç—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ—Å—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –∂–¥—É—Ç `t` | `e`,
// –ø–æ—ç—Ç–æ–º—É –º—ã –º–æ–∂–µ–º, –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—ã—à–∞—Ç—å –Ω–æ–º–µ—Ä —Å —Ç–µ—Å—Ç–æ–º, –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ,
// —Å—á–µ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–π (–∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º)
// –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ `t` / `e`, —Ç–∞–∫ –º—ã –∏–∑–±–∞–≤–ª—è–º—Å—è –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
// 3) e_x, –≥–¥–µ `e` - —ç—Ç–æ —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –ü–†–ò –ü–ê–ù–ò–ö–ï, –∞ `x` - –Ω–æ–º–µ—Ä —Ç–µ—Å—Ç–∞
// 3.1) `e` - —Ç–æ —á—Ç–æ –≤–æ–∑—Ä–∞—â–∞–µ—Ç –ø–∞–Ω–∏–∫—É –∏–ª–∏ –ø—Ä–æ–±—Ä–æ—Å –æ—à–∏–±–∫–∏, —Ç–∞–∫ –º–æ–∂–Ω–æ –º–∞—Ä–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã
// –∫–æ—Ç–æ—Ä—ã–µ `should_panic` –ª–∏–±–æ —Ç–µ, –≥–¥–µ –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏ `error == error`
// 3.2) `x` - –ø—É–Ω–∫—Ç 2.3

// –î–æ–ø–æ–ª—å–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)

// 1) –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –∫–∞–∂–¥—ã–π unit —Ç–µ—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü–∏—é –≤–∫–ª–∞–¥—ã–≤–∞—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å
// (—Å–∞–º–æ —Å–æ–±–æ–π –≤—Å—ë –≤ –æ–¥–∏–Ω –º–æ–¥—É–ª—å, –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ `submodule`),
// —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–µ–º, —á—Ç–æ –Ω–∞ –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü–∏—é –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤, –∏ –µ—Å–ª–∏ –º—ã –±—É–¥–µ–º –ø–∏—Å–∞—Ç—å
// –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–π —Å–≤–æ–∏ –º–æ–¥—É–ª—å, —Ç–æ –º—ã —Å–º–æ–∂–µ–º –ª–µ–≥–∫–æ –Ω–∞–π—Ç–∏ —Ç–µ—Å—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
// —Å –ø–æ–≤—ã—à–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤. –ò–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–∞–∫–∏–º –∂–µ –∫–∞–∫ –∏ —É —Ñ—É–Ω–∫—Ü–∏–π —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º `fn_`.

// 1.1) –ü—Ä–∏–º–µ—Ä :
//================(–°–∏–Ω—Ç–∞–∫—Å–∏—Å)================
// #[cfg(test)]
// mod tests {
//     #[cfg(test)]
//     mod fn_<–∏–º—è_—Ñ—É–Ω–∫—Ü–∏–∏> {
//         use super::*;
//         // –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–∑–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏–π –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
//     }
//     ... –ü–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
// }
//===========================================

// 2) –µ—Å–ª–∏ —Ç–µ—Å—Ç—ã –ø–∏—à—É—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–π –û–° –æ—Ç–¥–µ–ª—å–Ω–æ (–∫ –ø—Ä–∏–º–µ—Ä—É –¥–ª—è Windows –∏ Linux),
// –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω —Ç–µ—Å—Ç–æ–≤ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –º–æ–¥—É–ª–µ, –∞ –Ω–µ –≤ –¥–æ—á–µ—Ä–Ω–µ–º
// 3) –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º, –ø–æ—Å–ª–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å), —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∏ –ø—Ä–æ—Å—Ç–æ, —á—Ç–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è –≤ assert, –ï–°–õ–ò —ç—Ç–æ –Ω–µ –æ—á–µ–≤–∏–¥–Ω–æ –∏–∑ —Å–∞–º–æ–≥–æ –∫–æ–¥–∞

// Unit —Ç–µ—Å—Ç—ã
#[cfg(test)]
mod tests {
    use crate::*;

    #[cfg(test)]
    mod convert {
        use super::*;

        mod fn_bytes_to_string_utf8 {
            use super::*;
            #[test]
            fn bytes_to_string_utf8_t_0() {
                assert_eq!(
                    check_convert::convert::bytes_to_string_utf8("!!! üòä üòé & üöÄ".as_bytes())
                        .unwrap(),
                    "!!! üòä üòé & üöÄ"
                );
            }

            #[test]
            #[should_panic]
            fn bytes_to_string_utf8_f_0() {
                pyo3::prepare_freethreaded_python();
                check_convert::convert::bytes_to_string_utf8(b"\xF0\x90\x80").unwrap();
            }
        }

        mod fn_string_to_default_regex {
            use super::*;

            #[test]
            fn string_to_default_regex_t_0() {
                assert_eq!(
                    check_convert::convert::string_to_default_regex(String::from("[0-9]+?"))
                        .to_string(),
                    regex::Regex::new("[0-9]+?").unwrap().to_string()
                );
            }

            #[test]
            #[should_panic]
            fn string_to_default_regex_f_0() {
                check_convert::convert::string_to_default_regex(String::from(
                    r"\QThis is not a valid regex!@#$%^&*()_+\E",
                ));
            }

            #[test]
            #[should_panic(
                expected = "error: look-around, including look-ahead and look-behind, is not supported"
            )]
            fn string_to_default_regex_f_1() {
                check_convert::convert::string_to_default_regex(String::from(
                    r"(\b\w+\b)(?=.+?\1)",
                ));
            }
        }

        mod fn_string_to_fancy_regex {
            use super::*;
            #[test]
            fn string_to_fancy_regex_t_0() {
                assert_eq!(
                    check_convert::convert::string_to_default_regex(String::from("[0-9]+?"))
                        .to_string(),
                    regex::Regex::new("[0-9]+?").unwrap().to_string()
                );
            }

            #[test]
            fn string_to_fancy_regex_t_1() {
                check_convert::convert::string_to_fancy_regex(String::from(r"(\b\w+\b)(?=.+?\1)"));
            }

            #[test]
            #[should_panic]
            fn string_to_fancy_regex_f_0() {
                check_convert::convert::string_to_fancy_regex(String::from(
                    r"\QThis is not a valid regex!@#$%^&*()_+\E",
                ));
            }
        }
    }
    mod check_tests {
        use super::*;

        mod fn_is_default_regex_fisrt_step {
            use super::*;

            #[test]
            fn is_default_regex_fisrt_step_t_0() {
                assert_eq!(
                    check_convert::check::is_default_regex_fisrt_step("[0-9]+"),
                    true
                );
            }

            #[test]
            fn is_default_regex_fisrt_step_t_1() {
                assert_eq!(
                    check_convert::check::is_default_regex_fisrt_step(
                        r"\QThis is not a valid regex!@#$%^&*()_+\E"
                    ),
                    false
                );
            }

            #[test]
            fn is_default_regex_fisrt_step_t_2() {
                assert_eq!(
                    check_convert::check::is_default_regex_fisrt_step(r"(\b\w+\b)(?=.+?\1)"),
                    false
                );
            }
        }

        mod fn_fancy_regex_second_step {
            use super::*;

            #[test]
            fn is_fancy_regex_second_step_t_0() {
                assert_eq!(
                    check_convert::check::is_fancy_regex_second_step("[0-9]+"),
                    true
                );
            }

            #[test]
            fn is_fancy_regex_second_step_t_1() {
                assert_eq!(
                    check_convert::check::is_fancy_regex_second_step(
                        r"\QThis is not a valid regex!@#$%^&*()_+\E"
                    ),
                    false
                );
            }

            #[test]
            fn is_fancy_regex_second_step_t_2() {
                assert_eq!(
                    check_convert::check::is_fancy_regex_second_step(r"(\b\w+\b)(?=.+?\1)"),
                    true
                );
            }
        }
    }
    mod init_tests {
        use super::*;
        fn fn_core_get_any_regex_from_class(
            rules: &[(&str, IfFound)],
            all_simple_rules: &mut HashMap<RuleStatus, usize>,
            all_hard_rules: &mut HashMap<RuleStatus, usize>,
            selected_simple_rules: &mut Vec<String>,
            count_all_simple_rules: usize,
            count_all_hard_rules: usize,
            count_selected_simple_rules: usize,
        ) -> PyResult<()> {
            pyo3::prepare_freethreaded_python();
            Python::with_gil(|py| -> PyResult<()> {
                let dict = types::PyDict::new(py);
                for (key, value) in rules.iter() {
                    dict.set_item(key, Py::new(py, value.to_owned()).unwrap())?;
                }
                let class = types::PyType::new::<TemplateValidator>(py);
                class.setattr(RULES_FROM_CLASS_PY, dict)?;
                init::get_any_regex_from_class(
                    &class,
                    1,
                    all_simple_rules,
                    all_hard_rules,
                    selected_simple_rules,
                )?;
                assert_eq!(all_simple_rules.len(), count_all_simple_rules);
                assert_eq!(all_hard_rules.len(), count_all_hard_rules);
                assert_eq!(selected_simple_rules.len(), count_selected_simple_rules);
                Ok(())
            })
        }

        mod fn_get_any_regex_from_class {
            #[pyclass]
            struct FakeObj {
                status: bool,
            }
            #[pymethods]
            impl FakeObj {
                #[new]
                fn __new__() -> Self {
                    FakeObj { status: true }
                }
            }
            impl ToPyObject for FakeObj {
                fn to_object(&self, py: Python<'_>) -> PyObject {
                    self.status.to_object(py)
                }
            }
            use super::*;
            #[test]
            fn fn_get_any_regex_from_class_t_0() -> PyResult<()> {
                pyo3::prepare_freethreaded_python();
                let mut all_simple_rules = HashMap::new();
                let mut all_hard_rules = HashMap::new();
                let mut selected_simple_rules = Vec::new();
                fn_core_get_any_regex_from_class(
                    &[
                        ("rule1", IfFound::AllRight),
                        ("rule2", IfFound::RaiseError),
                        (r"(\b\w+\b)(?=.+?\1)", IfFound::RaiseError),
                    ],
                    &mut all_simple_rules,
                    &mut all_hard_rules,
                    &mut selected_simple_rules,
                    2,
                    1,
                    2,
                )
            }
            #[test]
            fn fn_get_any_regex_from_class_t_1() -> PyResult<()> {
                pyo3::prepare_freethreaded_python();
                let mut all_simple_rules = HashMap::new();
                let mut all_hard_rules = HashMap::new();
                let mut selected_simple_rules = Vec::new();
                fn_core_get_any_regex_from_class(
                    &[
                        ("rule1", IfFound::AllRight),
                        ("rule2", IfFound::AllRight),
                        ("rule3", IfFound::AllRight),
                        ("rule4", IfFound::AllRight),
                        ("rule2", IfFound::RaiseError),
                        (r"(\b\w+\b)(?=.+?\1)", IfFound::RaiseError),
                    ],
                    &mut all_simple_rules,
                    &mut all_hard_rules,
                    &mut selected_simple_rules,
                    4,
                    1,
                    4,
                )
            }
            #[test]
            #[should_panic(expected = r"PyErr { type: <class 'TypeError'>")]
            fn fn_get_any_regex_from_class_e_0() {
                pyo3::prepare_freethreaded_python();
                let mut all_simple_rules = HashMap::new();
                let mut all_hard_rules = HashMap::new();
                let mut selected_simple_rules = Vec::new();
                fn_core_get_any_regex_from_class(
                    &[
                        ("rule1", IfFound::AllRight),
                        ("rule2", IfFound::AllRight),
                        ("rule3", IfFound::AllRight),
                        ("rule4", IfFound::AllRight),
                        (
                            r"\QThis is not a valid regex!@#$%^&*()_+\E",
                            IfFound::RaiseError,
                        ),
                        (r"(\b\w+\b)(?=.+?\1)", IfFound::RaiseError),
                    ],
                    &mut all_simple_rules,
                    &mut all_hard_rules,
                    &mut selected_simple_rules,
                    4,
                    1,
                    4,
                )
                .unwrap()
            }

            #[test]
            #[should_panic(expected = r#"'None' must be a 'String"#)]
            fn fn_get_any_regex_from_class_e_1() {
                pyo3::prepare_freethreaded_python();
                Python::with_gil(|py| {
                    let rules = [(py.None(), IfFound::AllRight)];
                    let dict = types::PyDict::new(py);
                    for (key, value) in rules.iter() {
                        dict.set_item(key, Py::new(py, value.to_owned()).unwrap())
                            .unwrap();
                    }
                    let class = types::PyType::new::<TemplateValidator>(py);
                    class.setattr(RULES_FROM_CLASS_PY, dict).unwrap();
                    TemplateValidator::__new__(
                        types::PyList::new(py, [class.to_object(py).to_object(py)].iter())
                            .to_object(py),
                    )
                })
                .unwrap();
            }
            #[test]
            #[should_panic(expected = r#"'True' must be a 'Enum'"#)]
            fn fn_core_get_any_regex_from_class_e_2() {
                pyo3::prepare_freethreaded_python();
                Python::with_gil(|py| {
                    let rules = &[("rule1", FakeObj::__new__())];
                    let mut all_simple_rules: HashMap<RuleStatus, usize> = HashMap::new();
                    let mut all_hard_rules: HashMap<RuleStatus, usize> = HashMap::new();
                    let mut selected_simple_rules: Vec<String> = Vec::new();
                    let dict = types::PyDict::new(py);
                    for (key, value) in rules.iter() {
                        dict.set_item(key, value).unwrap();
                    }
                    let class = types::PyType::new::<TemplateValidator>(py);
                    class.setattr(RULES_FROM_CLASS_PY, dict).unwrap();
                    init::get_any_regex_from_class(
                        &class,
                        1,
                        &mut all_simple_rules,
                        &mut all_hard_rules,
                        &mut selected_simple_rules,
                    )
                    .unwrap();
                });
            }
            #[test]
            #[should_panic(expected = r#" must be a 'dict"#)]
            fn fn_core_get_any_regex_from_class_e_3() {
                pyo3::prepare_freethreaded_python();
                Python::with_gil(|py| {
                    let mut all_simple_rules: HashMap<RuleStatus, usize> = HashMap::new();
                    let mut all_hard_rules: HashMap<RuleStatus, usize> = HashMap::new();
                    let mut selected_simple_rules: Vec<String> = Vec::new();
                    let no_dict = types::PyBool::new(py, true);
                    let class = types::PyType::new::<TemplateValidator>(py);
                    class.setattr(RULES_FROM_CLASS_PY, no_dict).unwrap();
                    init::get_any_regex_from_class(
                        &class,
                        1,
                        &mut all_simple_rules,
                        &mut all_hard_rules,
                        &mut selected_simple_rules,
                    )
                    .unwrap();
                });
            }

            #[test]
            #[should_panic(expected = r"AttributeError")]
            fn fn_core_get_any_regex_from_class_e_4() {
                pyo3::prepare_freethreaded_python();
                Python::with_gil(|py| {
                    let mut all_simple_rules: HashMap<RuleStatus, usize> = HashMap::new();
                    let mut all_hard_rules: HashMap<RuleStatus, usize> = HashMap::new();
                    let mut selected_simple_rules: Vec<String> = Vec::new();
                    let fake_class = types::PyType::new::<IfFound>(py);
                    init::get_any_regex_from_class(
                        &fake_class,
                        0,
                        &mut all_simple_rules,
                        &mut all_hard_rules,
                        &mut selected_simple_rules,
                    )
                    .unwrap()
                });
            }
        }
        mod fn_data_unpackaging {
            use super::*;

            #[test]
            fn data_unpackaging_t_0() -> PyResult<()> {
                pyo3::prepare_freethreaded_python();
                Python::with_gil(|py| -> PyResult<()> {
                    let mut all_simple_rules: HashMap<RuleStatus, usize> = HashMap::new();
                    let mut all_hard_rules: HashMap<RuleStatus, usize> = HashMap::new();
                    let mut selected_simple_rules: Vec<String> = Vec::new();
                    let mut python_classes: HashMap<usize, PyObject> = HashMap::new();

                    let rules = &[
                        ("rule1", IfFound::AllRight),
                        ("rule2", IfFound::RaiseError),
                        (r"(\b\w+\b)(?=.+?\1)", IfFound::RaiseError),
                    ];
                    let dict = types::PyDict::new(py);
                    for (key, value) in rules.iter() {
                        dict.set_item(key, Py::new(py, value.to_owned()).unwrap())?;
                    }
                    let class = types::PyType::new::<TemplateValidator>(py);
                    class.setattr(RULES_FROM_CLASS_PY, dict)?;
                    let obj_main = types::PyList::new(py, [class].iter());
                    init::data_unpackaging(
                        py,
                        obj_main.to_object(py),
                        &mut python_classes,
                        &mut all_simple_rules,
                        &mut all_hard_rules,
                        &mut selected_simple_rules,
                    )
                })
            }
            #[test]
            fn data_unpackaging_t_1() -> PyResult<()> {
                pyo3::prepare_freethreaded_python();
                Python::with_gil(|py| -> PyResult<()> {
                    let rules = &[
                        ("rule1", IfFound::AllRight),
                        ("rule2", IfFound::RaiseError),
                        (r"(\b\w+\b)(?=.+?\1)", IfFound::RaiseError),
                    ];
                    let dict = types::PyDict::new(py);
                    for (key, value) in rules.iter() {
                        dict.set_item(key, Py::new(py, value.to_owned()).unwrap())?;
                    }
                    let class = types::PyType::new::<TemplateValidator>(py);
                    class.setattr(RULES_FROM_CLASS_PY, dict)?;
                    let obj_main = types::PyList::new(py, [class].iter());
                    TemplateValidator::__new__(obj_main.to_object(py))?;
                    Ok(())
                })
            }

            #[test]
            #[should_panic(expected = r#"'None' must be a 'List[ Class, Class... ]'")"#)]
            fn data_unpackaging_e_0() {
                pyo3::prepare_freethreaded_python();
                Python::with_gil(|py| {
                    let empty_obj = py.None();
                    TemplateValidator::__new__(empty_obj)
                })
                .unwrap();
            }
            #[test]
            #[should_panic(expected = r"must be a 'Class'")]
            fn data_unpackaging_e_1() {
                pyo3::prepare_freethreaded_python();
                Python::with_gil(|py| {
                    let mut all_simple_rules: HashMap<RuleStatus, usize> = HashMap::new();
                    let mut all_hard_rules: HashMap<RuleStatus, usize> = HashMap::new();
                    let mut selected_simple_rules: Vec<String> = Vec::new();
                    let mut python_classes: HashMap<usize, PyObject> = HashMap::new();
                    let obj1 = types::PyBool::new(py, true);
                    let obj_main = types::PyList::new(py, [obj1].iter());

                    init::data_unpackaging(
                        py,
                        obj_main.to_object(py),
                        &mut python_classes,
                        &mut all_simple_rules,
                        &mut all_hard_rules,
                        &mut selected_simple_rules,
                    )
                    .unwrap()
                });
            }
        }
    }
}
